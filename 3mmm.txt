model new
model restore 'mmm2.2'

block gridpoint initialize displacement-x 0
block gridpoint initialize displacement-y 0
block gridpoint initialize displacement-z 0
block gridpoint initialize velocity-x 0
block gridpoint initialize velocity-y 0
block gridpoint initialize velocity-z 0

model large-strain on

fish define stress_concentration_factor
      loop foreach local zp block.zone.list
          block.zone.extra(zp,3) =block.zone.stress.zz(zp)/block.zone.extra(zp,1) 
          block.zone.extra(zp,4) =block.zone.stress.min(zp)/block.zone.extra(zp,2) 
      end_loop 
end

;通用读取文件
define read_from_file(name)
    local f, data0, data, m, i, line, line_spl

    ; 打开文件
    f = file.open(name, 'r')
    data0 = file.read(f)
    file.close(f)

    ; 初始化返回数据列表
    data = list
    m = list.size(data0)

    ; 跳过标题行，从第2行开始
    loop i (2, m)
        line = string.simplify(data0(i))
        line_spl = string.split(line, ',')
        data('end') = line_spl
    end_loop
    return data
end

fish define coal_disp
       
    loop while y_min_model<=y_max_model
             p1=block.gp.near(x_center_coal,y_min_model,z_max_coal+0.4)
             p2=block.gp.near(x_center_coal,y_min_model,z_center_coal-0.4)
             table('coalTopDisp',y_min_model)=block.gp.disp.z(p1)
             table('coalButtomDisp',y_min_model)=block.gp.disp.z(p2)
             y_min_model=y_min_model+15
    end_loop 
end

;显示地面监测点
define filter_data(input_data,zorq)
    local data, i, row, name
    
    ; 初始化返回数据列表
    data = list
    
    ; 获取输入数据大小
    local size = list.size(input_data)
    
    ; 遍历每一行数据
    loop i (1, size)
        row = input_data(i);获取传过来每一行的数据
        ; 获取第一列（名称列）
        name = string.upper(row(1))
        zorq = string.upper(zorq);走向与倾向区分值
        
        ; 检查名称中是否包含"Z"
        if string.find(name, zorq) > 0 then
            data('end') = row
        endif
    end_loop
    
    return data
end

;布设地面检测点
fish define model_top_disp(data_file,zorq)
   
     ; 从文件中读取数据
    local data = read_from_file(data_file)
    local points_data = filter_data(data,zorq);过滤走向与倾向值
   
    local num_points = list.size(points_data);获取走向或倾向点的数量
    
     ; 创建num_points x3的数组用于存储监测点坐标
    monitor_points = array(num_points, 3)  ; num_points个点，每个点有3个坐标值 (X, Y, Z)
    
    ; 填充 monitor_points 数组
    loop local i (1, num_points)
        local row = points_data(i)  ; 获取第i行数据
        ; row(2), row(3), row(4) 分别是 X, Y, Z 坐标，转换为浮点数
        monitor_points(i, 1) = float(row(2))  ; X 坐标
        monitor_points(i, 2) = float(row(3))  ; Y 坐标
        monitor_points(i, 3) = float(row(4))  ; Z 坐标
    end_loop
    
    ; 遍历所有监测点
    loop local j (1, num_points)
        local x = monitor_points(j, 2)
        local y = monitor_points(j, 1)
        local z = monitor_points(j, 3)
        
        ; 找到最近的网格点
        local p = block.gp.near(x, y, z)
        
        if p == null then
            table('top'+zorq, y) = 0
        else
            table('top'+zorq, y) = block.gp.disp.z(p)
        endif
    end_loop
end

fish define get_stress

       
    loop while y_min_model<=y_max_model
             p5=block.zone.near(x_center_coal,y_min_model,z_max_coal+0.4)
             table('coalTopStress',y_min_model)=-1.*block.zone.stress.zz(p5)
             y_min_model=y_min_model+15
    end_loop 
end

define read_and_create_monitor_histories(filename)
    ; 读取文件
    local data = read_from_file(filename)
    local num_points = list.size(data)  ; 减去标题行
    local monitor_points = array(num_points, 3)  ; 动态分配数组大小
    local point_names = array(num_points)       ; 存储点名称
    ; 跳过标题行，从第2行开始
    loop local i (1, list.size(data))
        local line = data(i)                    ; 获取每行数据
        local idx = i - 1                       ; 数组索引从1开始
        point_names(i) = line(1)              ; 第1列为名称
        monitor_points(i, 2) = float(line(2)) ; 第2列为x
        monitor_points(i, 1) = float(line(3)) ; 第3列为y
        monitor_points(i, 3) = float(line(4)) ; 第4列为z
       
    end_loop
    ; 创建历史记录
    loop local j (1, num_points)
        local x = monitor_points(j, 1)
        local y = monitor_points(j, 2)
        local z = monitor_points(j, 3)
        local name = point_names(j)
        ; 检查最近的网格点是否存在
        local gp = block.gp.near(x, y, z)
        if gp = 0 then
            io.out("Skipping " + name + " at (" + string(x) + ", " + string(y,0,'',3,'f') + ", " + string(z) + ") - No gridpoint found")
            continue  ; 跳过此点，继续下一个
        endif
        command 
            block history name @name  displacement-z position @x @y @z
        endcommand
       
    end_loop

    ; 可选：返回数据以供检查
    return monitor_points
end

; 调用函数，假设文件名为 points.txt
[read_and_create_monitor_histories("points.txt")]


fish define mining_layer_one
  loop n (1,10)
    step_sav='10000mining_'+string(n*100)+'m'
    command 
        block delete range group @n
        model step 20000
        [stress_concentration_factor]
        [model_top_disp("points.txt","z")]
        [model_top_disp("points.txt","q")]
        [coal_disp]
        [get_stress]
        model save @step_sav
    endcommand
  endloop
end
[mining_layer_one]
model step 20000
model save 'mmm3'

;model save 'mmm4'